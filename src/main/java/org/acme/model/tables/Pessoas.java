/*
 * This file is generated by jOOQ.
 */
package org.acme.model.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.acme.model.Keys;
import org.acme.model.Public;
import org.acme.model.tables.records.PessoasRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pessoas extends TableImpl<PessoasRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.PESSOAS</code>
     */
    public static final Pessoas PESSOAS = new Pessoas();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PessoasRecord> getRecordType() {
        return PessoasRecord.class;
    }

    /**
     * The column <code>public.PESSOAS.ID</code>.
     */
    public final TableField<PessoasRecord, UUID> ID = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.PESSOAS.APELIDO</code>.
     */
    public final TableField<PessoasRecord, String> APELIDO = createField(DSL.name("APELIDO"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.PESSOAS.NASCIMENTO</code>.
     */
    public final TableField<PessoasRecord, String> NASCIMENTO = createField(DSL.name("NASCIMENTO"), SQLDataType.VARCHAR(12).nullable(false), this, "");

    /**
     * The column <code>public.PESSOAS.NOME</code>.
     */
    public final TableField<PessoasRecord, String> NOME = createField(DSL.name("NOME"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.PESSOAS.STACK</code>.
     */
    public final TableField<PessoasRecord, String> STACK = createField(DSL.name("STACK"), SQLDataType.VARCHAR(255), this, "");

    private Pessoas(Name alias, Table<PessoasRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pessoas(Name alias, Table<PessoasRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.PESSOAS</code> table reference
     */
    public Pessoas(String alias) {
        this(DSL.name(alias), PESSOAS);
    }

    /**
     * Create an aliased <code>public.PESSOAS</code> table reference
     */
    public Pessoas(Name alias) {
        this(alias, PESSOAS);
    }

    /**
     * Create a <code>public.PESSOAS</code> table reference
     */
    public Pessoas() {
        this(DSL.name("PESSOAS"), null);
    }

    public <O extends Record> Pessoas(Table<O> child, ForeignKey<O, PessoasRecord> key) {
        super(child, key, PESSOAS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PessoasRecord> getPrimaryKey() {
        return Keys.PESSOAS_PKEY;
    }

    @Override
    public List<UniqueKey<PessoasRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PESSOAS_APELIDO_KEY);
    }

    @Override
    public Pessoas as(String alias) {
        return new Pessoas(DSL.name(alias), this);
    }

    @Override
    public Pessoas as(Name alias) {
        return new Pessoas(alias, this);
    }

    @Override
    public Pessoas as(Table<?> alias) {
        return new Pessoas(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pessoas rename(String name) {
        return new Pessoas(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pessoas rename(Name name) {
        return new Pessoas(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pessoas rename(Table<?> name) {
        return new Pessoas(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super UUID, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super UUID, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
